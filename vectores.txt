Vectores
Un vector es simplemente una lista de elementos que son del mismo tipo.

Para combinar la lista de elementos en un vector, utilice la c()función y separe los elementos con una coma.

En el siguiente ejemplo, creamos una variable vectorial llamada frutas , que combina cadenas:
# Vector of strings
fruits <- c("banana", "apple", "orange")

# Print fruits
fruits
OUTPOUT
[1]"banana", "apple", "orange"
En este ejemplo, creamos un vector que combina valores numéricos:

Ejemplo
# Vector of numerical values
numbers <- c(1, 2, 3)

# Print numbers
numbers
[1] 1 2 3 

Para crear un vector con valores numéricos en una secuencia, utilice el :operador:

Ejemplo
# Vector with numerical values in a sequence
numbers <- 1:10

numbers


También puedes crear valores numéricos con decimales en una secuencia, pero 
ten en cuenta que si el último elemento no pertenece a la secuencia, no se utiliza:

Ejemplo
# Vector with numerical decimals in a sequence
numbers1 <- 1.5:6.5
numbers1

# Vector with numerical decimals in a sequence where the last element is not used
numbers2 <- 1.5:6.3
numbers2
Resultado:

[1] 1.5 2.5 3.5 4.5 5.5 6.5
[1] 1.5 2.5 3.5 4.5 5.5



En el siguiente ejemplo, creamos un vector de valores lógicos:

Ejemplo
# Vector of logical values
log_values <- c(TRUE, FALSE, TRUE, FALSE)

log_values

Longitud del vector
Para saber cuántos elementos tiene un vector, utilice la length()función:

Ejemplo
fruits <- c("banana", "apple", "orange")

length(fruits)

[1] 3

Ordenar un vector
Para ordenar elementos de un vector alfabéticamente o numéricamente, utilice la sort()función:

Ejemplo
fruits <- c("banana", "apple", "orange", "mango", "lemon")
numbers <- c(13, 3, 5, 7, 20, 2)

sort(fruits)  # Sort a string
sort(numbers) # Sort numbers

Vectores de acceso
Puede acceder a los elementos del vector consultando 
su número de índice entre corchetes []. El primer elemento tiene el índice 1, 
el segundo elemento tiene el índice 2, y así sucesivamente:

Ejemplo
fruits <- c("banana", "apple", "orange")

# Access the first item (banana)
fruits[1]


También puede acceder a múltiples elementos haciendo referencia a diferentes posiciones de índice con la c()función:

Ejemplo
fruits <- c("banana", "apple", "orange", "mango", "lemon")

# Access the first and third item (banana and orange)
fruits[c(1, 3)]

También puede utilizar números de índice negativos para acceder a todos los elementos excepto los especificados:

Ejemplo
fruits <- c("banana", "apple", "orange", "mango", "lemon")

# Access all items except for the first item
fruits[c(-1)]

Cambiar un artículo
Para cambiar el valor de un elemento específico, consulte el número de índice:

Ejemplo
fruits <- c("banana", "apple", "orange", "mango", "lemon")

# Change "banana" to "pear"
fruits[1] <- "pear"

# Print fruits
fruits


Vectores repetidos
Para repetir vectores, utilice la rep()función:

Ejemplo
Repita cada valor:

repeat_each <- rep(c(1,2,3), each = 3)

repeat_each

[1] 1 1 1 2 2 2 3 3 3


Ejemplo
Repita la secuencia del vector:

repeat_times <- rep(c(1,2,3), times = 3)

repeat_times

[1] 1 2 3 1 2 3 1 2 3

Ejemplo
Repita cada valor independientemente:

repeat_indepent <- rep(c(1,2,3), times = c(5,2,1))

repeat_indepent

[1] 1 1 1 1 1 2 2 3

Generación de vectores secuenciados
Uno de los ejemplos anteriores le mostró 
cómo crear un vector con valores numéricos en una secuencia con el :operador:

Ejemplo
numbers <- 1:10

numbers

[1] 1 2 3 4 5 6 7 8 9 10


Para realizar pasos más grandes o más pequeños en una secuencia, utilice la seq()función:

Ejemplo
numbers <- seq(from = 0, to = 100, by = 20)

numbers
[1]   0  20  40  60  80 100

Nota: La seq()función tiene tres parámetros: fromes donde comienza la secuencia, to
es donde termina la secuencia y byes el intervalo de la secuencia.